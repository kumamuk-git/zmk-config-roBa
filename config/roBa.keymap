#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp Q               &kp W           &kp E           &kp R               &kp T                                          &kp Y        &kp U                &kp I            &kp O            &kp P
&mt LEFT_CONTROL A  &mt LEFT_ALT S  &mt LEFT_GUI D  &mt LEFT_CONTROL F  &kp G        &kp LS(LG(S))     &kp DELETE      &kp H        &mt RIGHT_CONTROL J  &mt RIGHT_GUI K  &mt RIGHT_ALT L  &mt RIGHT_SHIFT MINUS
&mt LEFT_SHIFT Z    &kp X           &kp C           &kp V               &kp B        &kp LANGUAGE_2    &kp LANGUAGE_1  &kp N        &kp M                &lt 5 COMMA      &kp DOT          &mt RIGHT_SHIFT SQT
&mt LSHFT ESCAPE    &kp LEFT_WIN    &kp LEFT_ALT    &mo 1               &lt 5 SPACE  &lt 2 TAB         &kp BACKSPACE   &lt 1 ENTER                                                         &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp LC(TAB) LC(LS(TAB))>;
        };

        symbol_arrow {
            bindings = <
&kp EXCLAMATION    &kp AT_SIGN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans                        &trans         &kp PIPE   &kp COLON     &kp SEMICOLON   &kp PLUS
&kp DOUBLE_QUOTES  &kp SQT      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR  &trans    &trans  &kp AMPERSAND  &kp EQUAL  &kp UP_ARROW  &kp LEFT_BRACE  &kp RIGHT_BRACE
&kp PERCENT        &kp HASH     &kp ASTERISK          &kp GRAVE              &kp CARET   &trans    &trans  &kp TILDE      &kp LEFT   &kp DOWN      &kp RIGHT       &kp BACKSLASH
&trans             &trans       &trans                &trans                 &trans      &trans    &trans  &trans                                                  &trans
            >;
        };

        number_symbol {
            bindings = <
&kp ESCAPE    &kp N7        &kp N8        &kp N9        &kp MINUS                     &kp F10  &kp F7  &kp F8  &kp F9  &trans
&kp ASTERISK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS    &trans    &trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans
&kp SLASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &trans    &trans  &kp F12  &kp F1  &kp F2  &kp F3  &trans
&trans        &kp NUMBER_0  &kp NUMBER_0  &trans        &trans      &trans    &trans  &trans                           &trans
            >;
        };

        no_use {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp MB4  &mkp MB1  &mkp MB3  &mkp MB2  &mkp MB5
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                  &trans
            >;
        };

        scroll_fn_bluetooth {
            bindings = <
&kp LC(LA(DELETE))  &trans         &trans           &trans       &trans                    &kp LG(LS(NUMBER_8))    &kp LG(LS(NUMBER_9))  &kp LG(LS(NUMBER_0))  &bt BT_SEL 3  &bt BT_SEL 4
&trans              &kp LG(LS(S))  &kp LC(LS(TAB))  &kp LC(TAB)  &trans  &trans    &trans  &kp LG(LS(LEFT_ARROW))  &kp LG(LS(ENTER))     &kp LG(LS(RIGHT))     &bt BT_SEL 1  &bt BT_SEL 2
&trans              &trans         &trans           &trans       &trans  &trans    &trans  &kp LG(LS(NUMBER_6))    &kp LC(DOWN_ARROW)    &kp LG(LS(NUMBER_7))  &bt BT_SEL 0  &bt BT_CLR
&trans              &trans         &trans           &trans       &trans  &trans    &trans  &trans                                                                            &bt BT_CLR_ALL
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };
    };
};
