#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#define ZMK_MOUSE_POINTING_SCRL_VAL 100


&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    //automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <30 31>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <31 32>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <32 33>;
        };

        comma2 {
            bindings = <&kp COMMA>;
            key-positions = <13 31>;
        };

        period2 {
            bindings = <&kp PERIOD>;
            key-positions = <13 32>;
        };

        backslash2 {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <13 33>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
            tap-ms = <20>;
        }
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LEFT_ALT Q      &kp W             &kp E         &kp R                 &kp T                                                    &kp Y        &kp U  &kp I     &kp O     &kp P
&mt LEFT_CONTROL A  &kp S             &kp D         &kp F                 &kp G        &kp LS(LG(S))                &to 6          &kp H        &kp J  &lt 5 K   &kp L     &lt_to_layer_0 5 APOSTROPHE
&mt LEFT_SHIFT Z    &kp X             &kp C         &kp V                 &kp B        &none                        &none          &kp N        &kp M  &mkp MB1  &mkp MB2  &mt RIGHT_SHIFT SLASH
&kp LEFT_WIN        &kp LEFT_CONTROL  &kp LEFT_ALT  &lt_to_layer_0 1 TAB  &lt 2 SPACE  &lt_to_layer_0 5 ESCAPE      &kp BACKSPACE  &lt 2 ENTER                             &mt RIGHT_CONTROL MINUS
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SYMBOL {
            bindings = <
&kp PERCENT  &kp DOLLAR  &kp AMPERSAND     &kp CARET        &kp SLASH                             &kp PIPE2             &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LESS_THAN     &kp GREATER_THAN
&kp AT       &kp HASH    &kp ASTERISK      &kp PLUS         &kp EQUAL     &trans      &none       &kp UNDERSCORE        &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SEMICOLON     &kp COLON
&kp GRAVE    &kp TILDE   &kp LS(NUMBER_3)  &kp EXCLAMATION  &kp QUESTION  &trans      &trans      &kp NON_US_BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES
&trans       &trans      &trans            &trans           &trans        &trans      &kp DELETE  &kp ENTER                                                                            &kp ESCAPE
            >;
        };

        NUM {
            bindings = <
&kp LC(W)       &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS                                               &kp LC(PAGE_UP)  &kp HOME        &kp UP_ARROW    &kp END            &kp LC(PAGE_DOWN)
&kp LCTRL       &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp NUMBER_0  &kp LC(LA(KP_NUMBER_0))      &none       &kp PAGE_UP      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp PAGE_DOWN
&kp LEFT_SHIFT  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp ASTERISK                 &trans      &kp INSERT       &mkp MB4        &mkp MB1        &kp K_APPLICATION  &mkp MB5
&trans          &trans        &trans        &trans        &trans        &trans                       &kp DELETE  &kp ENTER                                                           &kp ESCAPE
            >;
        };

        ARROW {
            bindings = <
&kp LEFT_ALT      &kp F7  &kp F8  &kp F9  &kp F10                          &kp F9         &kp F10   &kp F11  &kp F12            &kp LA(F4)
&kp LEFT_CONTROL  &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans      &trans         &trans    &kp F5   &trans             &trans
&kp LEFT_SHIFT    &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans      &kp LS(LG(S))  &mkp MB4  &kp F2   &kp K_APPLICATION  &mkp MB5
&trans            &trans  &trans  &trans  &trans   &trans      &kp DELETE  &kp ENTER                                            &kp ESCAPE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp LA(LEFT_ALT)  &kp F7  &kp F8  &kp F9  &kp F10                          &kp F9         &kp F10   &kp F11  &kp F12            &kp RA(F4)
&kp LEFT_CONTROL  &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans      &trans         &trans    &kp F5   &trans             &trans
&trans            &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans      &kp LS(LG(S))  &mkp MB4  &kp F2   &kp K_APPLICATION  &mkp MB5
&trans            &trans  &trans  &trans  &trans   &trans      &kp DELETE  &kp ENTER                                            &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
